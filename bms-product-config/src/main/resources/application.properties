#暴露端口号
server.port=8899
#应用名称
spring.application.name=bms-product

#连接数据库的url
spring.datasource.druid.url=jdbc:mysql://localhost:3306/bms_product?characterEncoding=utf8&serverTimezone=GMT%2B8
#连接数据库的用户名
spring.datasource.druid.username=root
#连接数据库的密码
spring.datasource.druid.password=123456
#这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName
spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver
#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.druid.initial-size=5
#最小连接池数量
spring.datasource.druid.min-idle=5
#最大连接池数量
spring.datasource.druid.max-active=10
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，可以配置useUnfairLock属性为true使用非公平锁。
spring.datasource.druid.max-wait=6000
#使用非公平锁
spring.datasource.druid.use-unfair-lock=true
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements=false

spring.dubbo.server=true
spring.dubbo.registry.address=zookeeper://127.0.0.1:2181
spring.dubbo.protocol.name=dubbo
spring.dubbo.protocol.port=20881
spring.dubbo.application.name=${spring.application.name}

mybatis.config-location=classpath:mybatis/mybatis-config.xml
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml


## dubbo springboot 配置
#spring.dubbo.application.id=live-dubbo-provider


#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/bms_product
#spring.datasource.username=root
#spring.datasource.password=123456
## Hikari 数据源专用配置
#spring.datasource.hikari.maximum-pool-size=20
#spring.datasource.hikari.minimum-idle=5
## JPA 相关配置
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create

#============== kafka ===================
# 指定kafka 代理地址，可以多个
spring.kafka.bootstrap-servers=172.19.160.163:9092

#=============== provider  =======================
spring.kafka.producer.retries=0
# 每次批量发送消息的数量
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432

# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#=============== consumer  =======================
# 指定默认消费者group id
spring.kafka.consumer.group-id=user-log-group

spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=100ms

# 指定消息key和消息体的编解码方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

##七牛上传
qiniu.accessKey=sTuxy049VATCkPof5PwHtVsp3dohV3B2_EMDKVFq
qiniu.secretKey=bk6fp9UmCHBo7JuLjNXHE73PpxmVHdT-FUZgemdv
qiniu.bucket=test-bms
qiniu.path=http://pp0qxwf2k.bkt.clouddn.com

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=100MB
